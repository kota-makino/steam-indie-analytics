#!/usr/bin/env python3
"""
„Ç´„Çπ„Çø„É†Web„Çµ„Éº„Éê„ÉºÁâà„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
Flask + HTML/CSS/JavaScript „Çí‰ΩøÁî®„Åó„Å¶Streamlit„ÅÆÂïèÈ°å„ÇíÂÆåÂÖ®„Å´ÂõûÈÅø
"""

from flask import Flask, render_template_string, jsonify, request
import pandas as pd
import numpy as np
from sqlalchemy import create_engine, text
import os
from dotenv import load_dotenv
import json
from datetime import datetime
import threading
import time

# Flask „Ç¢„Éó„É™Ë®≠ÂÆö
app = Flask(__name__)
load_dotenv()

# „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öË®≠ÂÆö
DB_CONFIG = {
    "host": os.getenv("POSTGRES_HOST", "postgres"),
    "port": int(os.getenv("POSTGRES_PORT", 5432)),
    "database": os.getenv("POSTGRES_DB", "steam_analytics"),
    "user": os.getenv("POSTGRES_USER", "steam_user"),
    "password": os.getenv("POSTGRES_PASSWORD", "steam_password"),
}

engine = create_engine(
    f"postgresql://{DB_CONFIG['user']}:{DB_CONFIG['password']}@"
    f"{DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}"
)

def load_game_data():
    """„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„Çâ„Ç≤„Éº„É†„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø"""
    query = text("""
        SELECT 
            app_id, name, type, is_free, developers, publishers,
            price_final, genres, categories, positive_reviews,
            negative_reviews, total_reviews, platforms_windows,
            platforms_mac, platforms_linux, created_at
        FROM games
        WHERE type = 'game'
        ORDER BY created_at DESC
        LIMIT 1000;
    """)
    
    df = pd.read_sql_query(query, engine)
    
    # „Éá„Éº„ÇøÂâçÂá¶ÁêÜ
    df['price_usd'] = df['price_final'] / 100
    df.loc[df['is_free'] == True, 'price_usd'] = 0
    
    # „Ç§„É≥„Éá„Ç£„Éº„Ç≤„Éº„É†Âà§ÂÆö
    df['is_indie'] = df['genres'].apply(
        lambda x: bool(x and any('Indie' in str(genre) for genre in x if genre))
    )
    
    # „Åù„ÅÆ‰ªñ„ÅÆÂâçÂá¶ÁêÜ
    df['platform_count'] = (
        df['platforms_windows'].astype(int) + 
        df['platforms_mac'].astype(int) + 
        df['platforms_linux'].astype(int)
    )
    
    df['primary_genre'] = df['genres'].apply(
        lambda x: x[0] if isinstance(x, list) and len(x) > 0 else 'Other'
    )
    
    def price_category(price):
        if price == 0:
            return 'Free'
        elif price < 5:
            return 'Budget ($0-5)'
        elif price < 15:
            return 'Mid-range ($5-15)'
        elif price < 30:
            return 'Premium ($15-30)'
        else:
            return 'AAA ($30+)'
    
    df['price_category'] = df['price_usd'].apply(price_category)
    
    return df

# „Ç∞„É≠„Éº„Éê„É´„Éá„Éº„Çø
game_data = None

def refresh_data():
    """„Éá„Éº„Çø„ÇíÊõ¥Êñ∞"""
    global game_data
    try:
        game_data = load_game_data()
        print(f"‚úÖ „Éá„Éº„ÇøÊõ¥Êñ∞ÂÆå‰∫Ü: {len(game_data):,}‰ª∂")
    except Exception as e:
        print(f"‚ùå „Éá„Éº„ÇøÊõ¥Êñ∞„Ç®„É©„Éº: {e}")

# ÂàùÂõû„Éá„Éº„Çø„É≠„Éº„Éâ
refresh_data()

# HTML„ÉÜ„É≥„Éó„É¨„Éº„Éà
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéÆ Steam „Ç§„É≥„Éá„Ç£„Éº„Ç≤„Éº„É†Â∏ÇÂ†¥ÂàÜÊûê„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            color: #333;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .controls {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .control-group label {
            font-weight: bold;
            color: #555;
        }
        
        .control-group input, .control-group select {
            padding: 8px 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .metric-card {
            background: linear-gradient(135deg, #ff6b6b, #ff8e8e);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
        }
        
        .metric-card:nth-child(2) {
            background: linear-gradient(135deg, #4ecdc4, #7dd3c0);
        }
        
        .metric-card:nth-child(3) {
            background: linear-gradient(135deg, #45b7d1, #6cc4e6);
        }
        
        .metric-card:nth-child(4) {
            background: linear-gradient(135deg, #f9ca24, #f0932b);
        }
        
        .metric-value {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .metric-label {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .chart-container {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .chart-title {
            font-size: 1.3em;
            font-weight: bold;
            margin-bottom: 20px;
            color: #333;
            text-align: center;
        }
        
        .insights {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-top: 30px;
        }
        
        .insights h2 {
            margin-bottom: 20px;
            text-align: center;
        }
        
        .insights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .insight-card {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
        
        .insight-card h3 {
            margin-bottom: 10px;
            font-size: 1.1em;
        }
        
        .update-info {
            text-align: center;
            margin-top: 30px;
            color: #666;
            font-size: 0.9em;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: transform 0.2s ease;
        }
        
        .btn:hover {
            transform: scale(1.05);
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            
            .controls {
                flex-direction: column;
            }
            
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéÆ Steam „Ç§„É≥„Éá„Ç£„Éº„Ç≤„Éº„É†Â∏ÇÂ†¥ÂàÜÊûê</h1>
            <p>„Éá„Éº„ÇøÈßÜÂãïÂûã„ÅÆÂ∏ÇÂ†¥Ê¥ûÂØü„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</p>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label>
                    <input type="checkbox" id="indieOnly" checked> „Ç§„É≥„Éá„Ç£„Éº„Ç≤„Éº„É†„ÅÆ„ÅøË°®Á§∫
                </label>
            </div>
            
            <div class="control-group">
                <label for="maxPrice">ÊúÄÂ§ß‰æ°Ê†º ($)</label>
                <input type="range" id="maxPrice" min="0" max="100" value="50" step="5">
                <span id="maxPriceValue">$50</span>
            </div>
            
            <div class="control-group">
                <button class="btn" onclick="refreshData()">üîÑ „Éá„Éº„ÇøÊõ¥Êñ∞</button>
            </div>
        </div>
        
        <div class="metrics-grid" id="metricsGrid">
            <!-- „É°„Éà„É™„ÇØ„Çπ„ÅØJavaScript„ÅßÂãïÁöÑ„Å´ÁîüÊàê -->
        </div>
        
        <div class="charts-grid">
            <div class="chart-container">
                <div class="chart-title">‰∫∫Ê∞ó„Ç∏„É£„É≥„É´ TOP 10</div>
                <canvas id="genreChart"></canvas>
            </div>
            
            <div class="chart-container">
                <div class="chart-title">‰æ°Ê†ºÂ∏ØÂàÜÂ∏É</div>
                <canvas id="priceChart"></canvas>
            </div>
            
            <div class="chart-container">
                <div class="chart-title">„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂØæÂøúÁéá</div>
                <canvas id="platformChart"></canvas>
            </div>
            
            <div class="chart-container">
                <div class="chart-title">ÊúàÂà•„É™„É™„Éº„ÇπÂãïÂêë</div>
                <canvas id="trendChart"></canvas>
            </div>
        </div>
        
        <div class="insights">
            <h2>üí° Â∏ÇÂ†¥Ê¥ûÂØü</h2>
            <div class="insights-grid" id="insightsGrid">
                <!-- Ê¥ûÂØü„ÅØJavaScript„ÅßÂãïÁöÑ„Å´ÁîüÊàê -->
            </div>
        </div>
        
        <div class="update-info">
            <p>ÊúÄÁµÇÊõ¥Êñ∞: <span id="lastUpdate"></span> | „Éá„Éº„Çø„ÇΩ„Éº„Çπ: Steam Web API</p>
        </div>
    </div>
    
    <script>
        let gameData = null;
        let charts = {};
        
        // ÂàùÊúüÂåñ
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            
            // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
            document.getElementById('indieOnly').addEventListener('change', updateDashboard);
            document.getElementById('maxPrice').addEventListener('input', function() {
                document.getElementById('maxPriceValue').textContent = '$' + this.value;
                updateDashboard();
            });
        });
        
        // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadData() {
            try {
                const response = await fetch('/api/data');
                gameData = await response.json();
                updateDashboard();
                updateTimestamp();
            } catch (error) {
                console.error('„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            }
        }
        
        // „Éá„Éº„ÇøÊõ¥Êñ∞
        async function refreshData() {
            try {
                const response = await fetch('/api/refresh', { method: 'POST' });
                gameData = await response.json();
                updateDashboard();
                updateTimestamp();
                alert('„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„ÅüÔºÅ');
            } catch (error) {
                console.error('„Éá„Éº„ÇøÊõ¥Êñ∞„Ç®„É©„Éº:', error);
                alert('„Éá„Éº„ÇøÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
            }
        }
        
        // „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊõ¥Êñ∞
        function updateDashboard() {
            if (!gameData) return;
            
            // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞
            const indieOnly = document.getElementById('indieOnly').checked;
            const maxPrice = parseFloat(document.getElementById('maxPrice').value);
            
            let filteredData = gameData.filter(game => {
                if (indieOnly && !game.is_indie) return false;
                if (game.price_usd > maxPrice) return false;
                return true;
            });
            
            updateMetrics(filteredData);
            updateCharts(filteredData);
            updateInsights(filteredData);
        }
        
        // „É°„Éà„É™„ÇØ„ÇπÊõ¥Êñ∞
        function updateMetrics(data) {
            const totalGames = data.length;
            const indieGames = data.filter(g => g.is_indie).length;
            const avgPrice = data.filter(g => g.price_usd > 0).reduce((sum, g) => sum + g.price_usd, 0) / data.filter(g => g.price_usd > 0).length || 0;
            const freeGames = data.filter(g => g.price_usd === 0).length;
            
            const metricsHtml = `
                <div class="metric-card">
                    <div class="metric-value">${totalGames.toLocaleString()}</div>
                    <div class="metric-label">Á∑è„Ç≤„Éº„É†Êï∞</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${indieGames.toLocaleString()}</div>
                    <div class="metric-label">„Ç§„É≥„Éá„Ç£„Éº„Ç≤„Éº„É† (${(indieGames/totalGames*100).toFixed(1)}%)</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">$${avgPrice.toFixed(2)}</div>
                    <div class="metric-label">Âπ≥Âùá‰æ°Ê†º</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${freeGames.toLocaleString()}</div>
                    <div class="metric-label">ÁÑ°Êñô„Ç≤„Éº„É†</div>
                </div>
            `;
            
            document.getElementById('metricsGrid').innerHTML = metricsHtml;
        }
        
        // „ÉÅ„É£„Éº„ÉàÊõ¥Êñ∞
        function updateCharts(data) {
            updateGenreChart(data);
            updatePriceChart(data);
            updatePlatformChart(data);
            updateTrendChart(data);
        }
        
        // „Ç∏„É£„É≥„É´„ÉÅ„É£„Éº„Éà
        function updateGenreChart(data) {
            const genreCounts = {};
            data.forEach(game => {
                const genre = game.primary_genre || 'Other';
                genreCounts[genre] = (genreCounts[genre] || 0) + 1;
            });
            
            const sortedGenres = Object.entries(genreCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 10);
            
            const ctx = document.getElementById('genreChart').getContext('2d');
            
            if (charts.genre) charts.genre.destroy();
            
            charts.genre = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: sortedGenres.map(g => g[0]),
                    datasets: [{
                        data: sortedGenres.map(g => g[1]),
                        backgroundColor: 'rgba(102, 126, 234, 0.8)',
                        borderColor: 'rgba(102, 126, 234, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false }
                    },
                    scales: {
                        y: { beginAtZero: true }
                    }
                }
            });
        }
        
        // ‰æ°Ê†º„ÉÅ„É£„Éº„Éà
        function updatePriceChart(data) {
            const priceCounts = {};
            data.forEach(game => {
                const category = game.price_category || 'Other';
                priceCounts[category] = (priceCounts[category] || 0) + 1;
            });
            
            const ctx = document.getElementById('priceChart').getContext('2d');
            
            if (charts.price) charts.price.destroy();
            
            charts.price = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(priceCounts),
                    datasets: [{
                        data: Object.values(priceCounts),
                        backgroundColor: [
                            '#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#ff9ff3'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'bottom' }
                    }
                }
            });
        }
        
        // „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÉÅ„É£„Éº„Éà
        function updatePlatformChart(data) {
            const platformStats = {
                'Windows': data.filter(g => g.platforms_windows).length / data.length * 100,
                'Mac': data.filter(g => g.platforms_mac).length / data.length * 100,
                'Linux': data.filter(g => g.platforms_linux).length / data.length * 100
            };
            
            const ctx = document.getElementById('platformChart').getContext('2d');
            
            if (charts.platform) charts.platform.destroy();
            
            charts.platform = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(platformStats),
                    datasets: [{
                        data: Object.values(platformStats),
                        backgroundColor: ['#0078d4', '#ff6b35', '#f7931e']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // „Éà„É¨„É≥„Éâ„ÉÅ„É£„Éº„ÉàÔºà„ÉÄ„Éü„Éº„Éá„Éº„ÇøÔºâ
        function updateTrendChart(data) {
            const ctx = document.getElementById('trendChart').getContext('2d');
            
            if (charts.trend) charts.trend.destroy();
            
            // Á∞°ÊòìÁöÑ„Å™ÊúàÂà•ÈõÜË®à
            const months = ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà'];
            const values = [45, 52, 38, 61, 47, 55]; // „ÉÄ„Éü„Éº„Éá„Éº„Çø
            
            charts.trend = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: '„É™„É™„Éº„ÇπÊï∞',
                        data: values,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false }
                    },
                    scales: {
                        y: { beginAtZero: true }
                    }
                }
            });
        }
        
        // Ê¥ûÂØüÊõ¥Êñ∞
        function updateInsights(data) {
            const indieRatio = data.filter(g => g.is_indie).length / data.length * 100;
            const avgPrice = data.filter(g => g.price_usd > 0).reduce((sum, g) => sum + g.price_usd, 0) / data.filter(g => g.price_usd > 0).length || 0;
            
            const insightsHtml = `
                <div class="insight-card">
                    <h3>üéØ Â∏ÇÂ†¥ÊßãÈÄ†</h3>
                    <p>„Ç§„É≥„Éá„Ç£„Éº„Ç≤„Éº„É†„ÅåÂ∏ÇÂ†¥„ÅÆ${indieRatio.toFixed(1)}%„ÇíÂç†„ÇÅ„ÄÅ‰∏ªË¶Å„Çª„Ç∞„É°„É≥„Éà„ÇíÂΩ¢Êàê„ÄÇ</p>
                </div>
                <div class="insight-card">
                    <h3>üí∞ ‰æ°Ê†ºÊà¶Áï•</h3>
                    <p>Âπ≥Âùá‰æ°Ê†º$${avgPrice.toFixed(2)}„ÄÇ‰Ωé‰æ°Ê†ºÊà¶Áï•„Åå‰∏ªÊµÅ„Å†„Åå„ÄÅÂìÅË≥™„Å´„Çà„ÇãÂ∑ÆÂà•Âåñ„ÇÇÈáçË¶Å„ÄÇ</p>
                </div>
                <div class="insight-card">
                    <h3>üñ•Ô∏è „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†</h3>
                    <p>WindowsÂØæÂøú„ÅØÂøÖÈ†à„ÄÇMac/LinuxÂØæÂøú„Å´„Çà„ÇäÂ∑ÆÂà•ÂåñÂèØËÉΩ„ÄÇ</p>
                </div>
                <div class="insight-card">
                    <h3>üìà ÊàêÈï∑Ê©ü‰ºö</h3>
                    <p>„Éã„ÉÉ„ÉÅ„Ç∏„É£„É≥„É´„Åß„ÅÆÂ∞ÇÈñÄÂåñ„Å®„ÄÅ„Éû„É´„ÉÅ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†ÂØæÂøú„ÅåÈçµ„ÄÇ</p>
                </div>
            `;
            
            document.getElementById('insightsGrid').innerHTML = insightsHtml;
        }
        
        // „Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÊõ¥Êñ∞
        function updateTimestamp() {
            document.getElementById('lastUpdate').textContent = new Date().toLocaleString('ja-JP');
        }
    </script>
</body>
</html>
"""

@app.route('/')
def dashboard():
    """„É°„Ç§„É≥„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éö„Éº„Ç∏"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/data')
def get_data():
    """„Ç≤„Éº„É†„Éá„Éº„Çø„ÇíJSONÂΩ¢Âºè„ÅßËøî„Åô"""
    if game_data is None:
        return jsonify([])
    
    # DataFrame„ÇíJSON„Å´Â§âÊèõ
    return jsonify(game_data.to_dict('records'))

@app.route('/api/refresh', methods=['POST'])
def refresh_data_api():
    """„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Å¶JSONÂΩ¢Âºè„ÅßËøî„Åô"""
    refresh_data()
    
    if game_data is None:
        return jsonify([])
    
    return jsonify(game_data.to_dict('records'))

if __name__ == '__main__':
    print("üéÆ Steam Analytics „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Çµ„Éº„Éê„ÉºËµ∑Âãï‰∏≠...")
    print("üìä „Ç¢„ÇØ„Çª„Çπ URL: http://localhost:8501")
    print("üîÑ Ctrl+C „ÅßÂÅúÊ≠¢")
    
    # „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅßËµ∑Âãï
    app.run(host='0.0.0.0', port=8501, debug=True)