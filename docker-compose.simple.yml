# Simple Docker Compose - ドメイン不要版
# IPアドレス直接アクセス用

services:
  # アプリケーション
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: steam_app_simple
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-steam_analytics_prod}
      - POSTGRES_USER=${POSTGRES_USER:-steam_user_prod}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENVIRONMENT=production
      - DEBUG=False
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: steam_postgres_simple
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-steam_analytics_prod}
      POSTGRES_USER: ${POSTGRES_USER:-steam_user_prod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-steam_user_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: steam_redis_simple
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Simple)
  nginx:
    image: nginx:alpine
    container_name: steam_nginx_simple
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-simple.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data: